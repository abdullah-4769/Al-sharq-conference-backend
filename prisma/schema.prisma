datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  password     String
  name         String
  phone        String?
  file         String?   
  role         String?   @default("participant") 
  organization String?
  photo        String?
  isBlocked    Boolean   @default(false)
  speakers  Speaker[]
  eventJoins EventJoin[]
  representatives Representative[]
  participants Participant[] 
  participantDirectories ParticipantDirectory[]  
  exhibitorsRepresented    ExhibitorRepresentative[]
  sentRequests     ConnectionRequest[] @relation("SentRequests")
  receivedRequests ConnectionRequest[] @relation("ReceivedRequests")
  sentMessages    ChatMessage[]   @relation("SentMessages")
  receivedMessages ChatMessage[]  @relation("ReceivedMessages")
  sessionRegistrations SessionRegistration[]
  sessionJoins       SessionJoin[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Event {
  id           Int       @id @default(autoincrement())
  title        String
  description  String
  startTime    DateTime?
  endTime      DateTime?
  location     String
  googleMapLink String?
  sessions    Session[]
  participants Participant[]
  joinToken     String?   @unique  
  mapstatus    Boolean 
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  registrations EventRegistration[]
  eventJoins   EventJoin[]

  sessionRegistrations SessionRegistration[]
  participantDirectories ParticipantDirectory[]
  sponsors    Sponsor[]   @relation("EventSponsors")
  exhibitors  Exhibitor[] @relation("EventExhibitors")
}

model Sponsor {
  id              Int              @id @default(autoincrement())
  name            String
  category        String?   
  Pic_url         String?
  description     String?
  website         String?
  email           String?
  phone           String?
  linkedin        String?
  twitter         String?
  youtube         String?
  password        String?
  role            String           @default("sponsor") 
  products        Product[]         // no onDelete here
  representatives Representative[]  // no onDelete here
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  events    Event[] @relation("EventSponsors")
}

model Product {
  id          Int       @id @default(autoincrement())
  sponsorId   Int
  title       String
  description String?
  sponsor     Sponsor   @relation(fields: [sponsorId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Representative {
  id           Int       @id @default(autoincrement())
  sponsorId    Int
  userId       Int
  displayTitle String?
  sponsor      Sponsor   @relation(fields: [sponsorId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Exhibitor {
  id              Int              @id @default(autoincrement())
  name            String
  picUrl          String?          
  description     String?
  location        String?
  website         String?
  email           String?
  phone           String?
  linkedin        String?
  twitter         String?
  youtube         String?
  password        String?          // new password field
  role            String           @default("exhibitor")
  products        ExhibitorProduct[]
  representatives ExhibitorRepresentative[]
  booths          Booth[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  events    Event[] @relation("EventExhibitors")
}

model ExhibitorProduct {
  id           Int        @id @default(autoincrement())
  exhibitorId  Int
  title        String
  description  String?
  exhibitor    Exhibitor  @relation(fields: [exhibitorId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model ExhibitorRepresentative {
  id            Int        @id @default(autoincrement())
  exhibitorId   Int
  userId        Int
  displayTitle  String?
  exhibitor     Exhibitor  @relation(fields: [exhibitorId], references: [id], onDelete: Cascade)
  user          User       @relation(fields: [userId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Booth {
  id            Int        @id @default(autoincrement())
  exhibitorId   Int
  boothNumber   String
  boothLocation String
  mapLink       String?    // store Google Maps or any map link
  distance      Float?
  openTime      String?
  exhibitor     Exhibitor  @relation(fields: [exhibitorId], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}



model Speaker {
  id           Int       @id @default(autoincrement())
  userId       Int       @unique
  user         User      @relation(fields: [userId], references: [id])
  designations String[] 
  bio          String?
  expertise    String[]
  tags         String[]
  category     String?
  country      String?
  website      String?
  youtube     String?
  facebook     String?
  linkedin     String?
  twitter      String?
  sessions     Session[]  @relation("SessionSpeakers")
 
  featured     Boolean   @default(false)
  verified     Boolean   @default(false)
  priority     Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  isActive     Boolean   @default(true)
}




model Session {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String?
  category    String?      // e.g. "Workshop", "Panel", "Keynote"
  capacity    Int?         // max seats for the session
  tags        String[]     // simple array of tags

  speakers    Speaker[]    @relation("SessionSpeakers")
  event       Event        @relation(fields: [eventId], references: [id])
  eventId     Int
  participants Participant[] @relation("ParticipantSessions")
  joinToken            String?      // token for joining session
  registrationRequired Boolean      @default(false) // new field
  sessionRegistrations SessionRegistration[]
  sessionJoins         SessionJoin[]
  participantDirectories ParticipantDirectory[]
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}


model Participant {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  event     Event     @relation(fields: [eventId], references: [id])
  eventId   Int
  sessions  Session[] @relation("ParticipantSessions")

  createdAt DateTime  @default(now())
}



model EventRegistration {
  id        Int      @id @default(autoincrement())
  userId    Int?
  name      String
  email     String   @unique
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  joinCode  String   @unique       // frontend friendly 6-character code
  token     String                  // stores actual event join token
  createdAt DateTime @default(now())
}


model EventJoin {
  id        Int      @id @default(autoincrement())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  joinedAt  DateTime @default(now())

  @@unique([eventId, userId]) // prevent multiple joins for same user in same event
}



model ParticipantDirectory {
  id        Int      @id @default(autoincrement())
  event     Event?   @relation(fields: [eventId], references: [id])
  eventId   Int?
  session   Session? @relation(fields: [sessionId], references: [id])
  sessionId Int?
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  optedIn   Boolean  @default(false)

  @@unique([userId, eventId, sessionId])
}




model ConnectionRequest {
  id          Int      @id @default(autoincrement())
  sender      User     @relation("SentRequests", fields: [senderId], references: [id])
  senderId    Int
  receiver    User     @relation("ReceivedRequests", fields: [receiverId], references: [id])
  receiverId  Int
  status      ConnectionStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastReadAt   DateTime?   @default(now())

  @@unique([senderId, receiverId]) // prevent duplicate requests
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
}



model ChatMessage {
  id          Int      @id @default(autoincrement())
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId    Int
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId  Int
  content     String
  createdAt   DateTime @default(now())

  @@index([senderId])
  @@index([receiverId])
}


model SessionRegistration {
  id                 Int      @id @default(autoincrement())
  user               User     @relation(fields: [userId], references: [id])
  userId             Int
  event              Event?   @relation(fields: [eventId], references: [id])
  eventId            Int?
  session            Session  @relation(fields: [sessionId], references: [id])
  sessionId          Int
  name               String?
  organization       String?
  email              String?
  whyWantToJoin      String?
  relevantExperience String?
  joinCode           String   @unique
  token              String
  createdAt          DateTime @default(now())
}


model SessionJoin {
  id        Int      @id @default(autoincrement())
  session   Session  @relation(fields: [sessionId], references: [id])
  sessionId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  joinedAt  DateTime @default(now())

  @@unique([sessionId, userId])
}
